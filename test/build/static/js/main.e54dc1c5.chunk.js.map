{"version":3,"sources":["components/TOC.js","components/Content.js","components/Subject.js","App.js","serviceWorker.js","index.js"],"names":["TOC","lists","data","this","props","i","length","push","key","id","href","data-id","onClick","e","preventDefault","onChangePage","target","dataset","bind","title","Component","Content","console","log","desc","Subject","sub","App","state","mode","selected_content_id","subject","welcome","contents","_title","_desc","className","setState","Number","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAgCeA,G,uLAxBP,IAHA,IAAMC,EAAQ,GACRC,EAAOC,KAAKC,MAAMF,KACpBG,EAAI,EACFA,EAAIH,EAAKI,QACXL,EAAMM,KACF,wBAAIC,IAAKN,EAAKG,GAAGI,IACb,uBACAC,KAAM,YAAYR,EAAKG,GAAGI,GAC1BE,UAAWT,EAAKG,GAAGI,GACnBG,QAAS,SAAUC,GACfA,EAAEC,iBACFX,KAAKC,MAAMW,aAAaF,EAAEG,OAAOC,QAAQR,KAC3CS,KAAKf,OACND,EAAKG,GAAGc,SAEjBd,GAAQ,EAEZ,OACI,6BACI,4BACKJ,Q,GAtBHmB,cCYHC,E,iLATP,OADAC,QAAQC,IAAI,kBAER,iCACI,4BAAKpB,KAAKC,MAAMe,OACfhB,KAAKC,MAAMoB,U,GANNJ,aCcPK,E,iLAZP,OACI,gCACI,4BAAI,uBAAGf,KAAK,IAAIE,QAAS,SAASC,GAC9BA,EAAEC,iBACFX,KAAKC,MAAMW,gBACbG,KAAKf,OAAQA,KAAKC,MAAMe,QACzBhB,KAAKC,MAAMsB,S,GARNN,aC+DPO,E,YA3DX,WAAYvB,GAAQ,IAAD,8BACf,4CAAMA,KACDwB,MAAQ,CACTC,KAAM,OACNC,oBAAqB,EACrBC,QAAU,CAACZ,MAAO,MAAOO,IAAK,mBAC9BM,QAAS,CAACb,MAAO,UAAWK,KAAO,kBACnCS,SAAW,CACP,CAACxB,GAAG,EAAGU,MAAO,OAAQK,KAAM,4BAC5B,CAACf,GAAG,EAAGU,MAAO,MAAOK,KAAM,6BATpB,E,sEAef,IAAIU,EAAQC,EAAQ,KACpB,GAAuB,YAApBhC,KAAKyB,MAAMC,KACVK,EAAS/B,KAAKyB,MAAMI,QAAQb,MAC5BgB,EAAQhC,KAAKyB,MAAMI,QAAQR,UACxB,GAAuB,SAApBrB,KAAKyB,MAAMC,KAEjB,IADA,IAAIxB,EAAI,EACFA,EAAIF,KAAKyB,MAAMK,SAAS3B,QAAO,CACjC,IAAIJ,EAAOC,KAAKyB,MAAMK,SAAS5B,GAC/B,GAAGH,EAAKO,KAAON,KAAKyB,MAAME,oBAAoB,CAC1CI,EAAShC,EAAKiB,MACdgB,EAAQjC,EAAKsB,KACb,MAEJnB,GAAK,EAIf,OADEiB,QAAQC,IAAI,SAAUpB,MAEpB,yBAAKiC,UAAU,OAEX,kBAAC,EAAD,CACIjB,MAAShB,KAAKyB,MAAMG,QAAQZ,MAC5BO,IAAOvB,KAAKyB,MAAMG,QAAQL,IAC1BX,aAAgB,WACZZ,KAAKkC,SAAS,CAACR,KAAO,aACxBX,KAAKf,QAEX,kBAAC,EAAD,CACAY,aAAgB,SAAUN,GACtBN,KAAKkC,SAAS,CACVR,KAAM,OACNC,oBAAqBQ,OAAO7B,MAElCS,KAAKf,MACPD,KAAMC,KAAKyB,MAAMK,WAEjB,kBAAC,EAAD,CACId,MAASe,EACTV,KAAQW,S,GAtDRf,aCMEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.e54dc1c5.chunk.js","sourcesContent":["import React, {Component} from \"react\"\n\n\nclass TOC extends Component {\n    render() {\n        const lists = [];\n        const data = this.props.data\n        let i = 0;\n        while(i < data.length) {\n            lists.push(\n                <li key={data[i].id}>\n                    <a\n                    href={\"/content/\"+data[i].id}\n                    data-id = {data[i].id}\n                    onClick={function (e) {\n                        e.preventDefault();\n                        this.props.onChangePage(e.target.dataset.id); // onChagePage를 호출할 때 해당 태그의 target에 있는 data를 넘겨준다.\n                    }.bind(this)}>\n                    {data[i].title}</a>\n                </li>)\n            i = i + 1;\n        }\n        return (\n            <nav>\n                <ul>\n                    {lists}\n                </ul>\n            </nav>\n        );\n    }\n}\n\nexport default TOC;\n","import {Component} from \"react\"\nimport React from \"react\"\n\nclass Content extends Component{\n    render() {\n        console.log('content render')\n        return (\n            <article>\n                <h2>{this.props.title}</h2>\n                {this.props.desc}\n            </article>\n        )\n    }\n}\n\nexport default Content\n","import {Component} from \"react\"\nimport React from \"react\"\n\nclass Subject extends Component {\n    render() {\n        return (\n            <header>\n                <h1><a href=\"/\" onClick={function(e){\n                    e.preventDefault();\n                    this.props.onChangePage();\n                }.bind(this)}>{this.props.title}</a></h1>\n                {this.props.sub}\n            </header>\n        );\n    }\n}\n\nexport default Subject\n","import React, { Component } from 'react';\nimport './App.css'; // APP 컴포넌트의 디자인 css\nimport TOC from './components/TOC'\nimport Content from './components/Content'\nimport Subject from './components/Subject'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { // state 초기화\n            mode: \"read\",\n            selected_content_id: 2,\n            subject : {title: 'WEB', sub: \"World Wide Web!\"},\n            welcome: {title: \"welcome\", desc : \"Hello, React!!\"},\n            contents : [\n                {id:1, title: 'HTML', desc: 'Html is for information '},\n                {id:2, title: 'CSS', desc: 'CSS is for information '},\n            ]\n        }\n    }\n    // state의 값이 바뀌면 render()함수가 다시 호출되며 하위에 컴포넌트도 다시 호출된다.\n    render() {\n        let _title, _desc = null;\n        if(this.state.mode === 'welcome'){\n            _title = this.state.welcome.title;\n            _desc = this.state.welcome.desc;\n        } else if(this.state.mode === 'read'){\n            let i = 0;\n            while(i < this.state.contents.length){\n                var data = this.state.contents[i];\n                if(data.id === this.state.selected_content_id){\n                    _title = data.title;\n                    _desc = data.desc;\n                    break;\n                }\n                i += 1;\n            }\n        }\n        console.log('render', this);\n      return (\n          <div className=\"App\">\n              {/*state를 바꾸는 방법 setState(), bind로 this를 묶어준다.*/}\n              <Subject\n                  title = {this.state.subject.title}\n                  sub = {this.state.subject.sub}\n                  onChangePage = {function(){\n                      this.setState({mode : 'welcome'})\n                  }.bind(this)}\n              />\n              <TOC\n              onChangePage = {function (id) {\n                  this.setState({\n                      mode: 'read',\n                      selected_content_id: Number(id)\n                  })\n              }.bind(this)}\n              data={this.state.contents}\n              />\n              <Content\n                  title = {_title}\n                  desc = {_desc}/>\n          </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}